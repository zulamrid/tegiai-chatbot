{"version":3,"sources":["store/app/index.js","store/createStore.js","assets/wav/alert.wav","store/app/action.js","assets/gif/loading.gif","components/RootApp.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","datas_chat","isLoading","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","reducer","combineReducers","app","state","action","type","concat","datas","store","createStore","translate_url","storeDataChat","payload","setLoading","audio","Audio","alertwav","connect","dispatch","storeChat","axios","post","text","then","res","dataToPush","data","body","lastIndex","messages","length","res2","play","React","useState","words","setWords","recog","window","speechRecognition","webkitSpeechRecognition","loading","useEffect","onstart","console","log","onresult","event","current","resultIndex","message","results","transcript","className","map","v","i","is_user","korean","src","loadgif","size","color","onClick","start","value","placeholder","onChange","e","target","App","Store","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39c55006.chunk.js","sourcesContent":["const initialState = {\n    datas_chat: [],\n    isLoading: false\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'STORE_CHAT':\n            return {\n                ...state,\n                datas_chat: state.datas_chat.concat(action.datas),\n            }\n        case 'LOADING':\n            return {\n                ...state,\n                isLoading: !state.isLoading,\n            }\n        default:\n            return state\n    }\n}","import {compose, createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport app from './app';\n\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\n\nconst reducer = combineReducers({\n    app,\n})\n\nconst store = createStore(reducer, composedEnhancer);\n\nexport default store;","export default __webpack_public_path__ + \"static/media/alert.54f09e8a.wav\";","import axios from 'axios';\nimport alertwav from './../../assets/wav/alert.wav';\nimport {\n    translate\n} from './api';\n\nconst url = 'https://tegiai-gi4coglcca-de.a.run.app';\nconst translate_url = 'https://tegiainew.de.r.appspot.com/'\n\nconst storeDataChat = (payload) => ({\n    type: 'STORE_CHAT',\n    datas: payload\n})\n\nconst setLoading = () => ({\n    type: 'LOADING'\n})\n\nlet audio = new Audio(alertwav)\n\nexport const storeChat = (payload) => {\n    return (dispatch) => {\n        axios.post(`${translate_url}/translate`, {\n            'text': payload.text,\n            'tolang': 'kor'\n        })\n            .then(res => {\n                let dataToPush = {\n                    'is_user': true,\n                    'text': payload.text,\n                    'korean': res.data.body\n                }\n                dispatch(storeDataChat(dataToPush))\n                dispatch(setLoading())\n            })\n        axios.post(`${url}/add_input`, {\n            'text': payload.text\n        })\n            .then(res => {\n                let lastIndex = res.data.messages.length - 1\n                axios.post(`${translate_url}/translate`, {\n                    'text': res.data.messages[lastIndex].text,\n                    'tolang': 'kor'\n                })\n                    .then(res2 => {\n                        let dataToPush = {\n                            'is_user': false,\n                            'text': res.data.messages[lastIndex].text,\n                            'korean': res2.data.body\n                        }\n                        dispatch(storeDataChat(dataToPush))\n                    })\n\n                audio.play()\n            })\n        dispatch(setLoading)\n    }\n}\n\n\n","export default __webpack_public_path__ + \"static/media/loading.b25e7f61.gif\";","import React from 'react';\nimport { connect } from 'react-redux';\nimport { storeChat } from './../store/app/action';\nimport { FaPlay, FaMicrophone } from \"react-icons/fa\";\nimport axios from 'axios';\n\nimport loadgif from './../assets/gif/loading.gif'\n\n\nexport const RootApp = ({ datas_chat, storeChat, isLoading }) => {\n    const [words, setWords] = React.useState('')\n    const SpeechRecognition = window.speechRecognition || window.webkitSpeechRecognition;\n    const recog = new SpeechRecognition()\n    const [loading, setLoading] = React.useState(true)\n\n    React.useEffect(() => {\n        axios.post('https://tegiai-gi4coglcca-de.a.run.app/reset')\n    }, [])\n\n    React.useEffect(() => {\n      setLoading(!loading)\n    }, [datas_chat])\n\n    const start = () => {\n        recog.start()\n    }\n\n    recog.onstart = function () {\n        console.log(\"Voice is activated\")\n    }\n\n    recog.onresult = function (event) {\n        const current = event.resultIndex;\n        const message = event.results[current][0].transcript\n        setWords(message)\n        // readIttLoud(message)\n        // setIsTalk(false)\n        storeChat({ 'is_user': true, \"text\": message })\n        setWords('')\n    }\n\n\n    const sendquestion = () => {\n        storeChat({ 'is_user': true, \"text\": words })\n        console.log(datas_chat)\n        setWords('')\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"chat-box\">\n                <div className=\"ballon-container\">\n\n                    {datas_chat.length === 0 ?\n                        <div className=\"no-msg\"><span>No Message</span></div>\n                        :\n                        datas_chat.map((v, i) =>\n                            v.is_user ?\n                                <div className=\"ballon\" key={i}>\n                                    <div className=\"ballon-ava-left\">\n\n                                    </div>\n                                    <div className=\"ballon-text-left\">\n                                        <span>{v.text}</span>\n                                        <div className=\"line\" />\n                                        <span className=\"korean\">{v.korean}</span>\n                                    </div>\n                                </div>\n                                :\n                                <div className=\"ballon\" key={i}>\n\n                                    <div className=\"ballon-text-left\">\n                                        <span>{v.text}</span>\n                                        <div className=\"line\" />\n                                        <span className=\"korean\">{v.korean}</span>\n                                    </div>\n                                    <div className=\"ballon-ava-right\">\n\n                                    </div>\n                                </div>\n                        )\n                    }\n                    {loading ?\n                        <div className=\"reply-loading\">\n                            <img src={loadgif} />\n                        </div>\n                        :\n                        \"\"\n                    }\n\n                </div>\n            </div>\n            <div className=\"text-box\">\n                <div className=\"rec-container\">\n                    <FaMicrophone size={25} color=\"red\" onClick={start} />\n                </div>\n                <div className=\"input-container\">\n                    <input type=\"text\" value={words} placeholder=\"Input your message here\" onChange={(e) => setWords(e.target.value)} />\n                </div>\n\n                <div className=\"button-container\">\n                    <button onClick={sendquestion}><FaPlay size={15} color=\"white\" /></button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ app }) => {\n    return {\n        datas_chat: app.datas_chat,\n        isLoading: app.isLoading\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        storeChat: (payload) => dispatch(storeChat(payload)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RootApp)","import './App.css';\nimport { Provider } from 'react-redux';\n\nimport Store from './store/createStore';\nimport RootApp from './components/RootApp';\n\nfunction App() {\n\n  // React.useEffect(() => {\n  //   axios.post('https://tegiai-gi4coglcca-de.a.run.app/reset')\n  // }, [])\n\n  // const [isTalk, setIsTalk] = React.useState(false)\n  \n  // const [msg, setMsg] = React.useState([])\n\n \n\n  \n  // const getBot = (texts) => {\n  //   const text = {\n  //     texts\n  //   }\n  //   axios.post('https://tegiai-gi4coglcca-de.a.run.app/add_input', {\n  //     \"text\" : texts\n  //   })\n  //   .then(res => {\n  //     let lastIndex = res.data.messages.length - 1\n  //     msg.push(res.data.messages[lastIndex])\n  //     readIttLoud(res.data.messages[lastIndex].text)\n  //     console.log(lastIndex)\n  //   })\n  // }\n  \n\n  \n\n  // const reset = () => {\n  //   alert(\"tes\")\n  // }\n\n  // const readIttLoud = (message) => {\n\n  //   const speech = new SpeechSynthesisUtterance();\n  //   speech.text = message;\n  //   speech.volume = 1;\n  //   speech.rate = 1;\n  //   speech.pitch = 1;\n\n  //   window.speechSynthesis.speak(speech)\n  // }\n\n\n\n\n  return (\n    <Provider store={Store}>\n        <RootApp />\n    </Provider>\n);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}